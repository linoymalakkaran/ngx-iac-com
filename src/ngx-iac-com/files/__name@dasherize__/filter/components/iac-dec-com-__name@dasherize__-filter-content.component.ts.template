import { Component, OnInit, OnDestroy, EventEmitter } from "@angular/core";
import { Subscription } from "rxjs";
import { FormBuilder, FormGroup } from "@angular/forms";
import { AtlpSidebarService } from "projects/@atlp/components/sidebar/sidebar.service";
import { SidebarName } from "projects/@atlp/core/enums/sidebar-name.enum";
import { TranslateService } from "@ngx-translate/core";
import { IacDecComCommonService } from "../../../shared/services/iac-dec-com-common.service";
import { IAC_FILTER_TOKEN } from "projects/atlp-iac-ui/projects/@iac-shared/iac-filters/token/iac_filter.token";
import { IacDecCom<%=classify(name)%>TableDataService } from "../../components/iac-dec-com-<%=name%>-table/services/iac-dec-com-<%=name%>-table-data.service";
import { IacFilterModel } from "projects/atlp-iac-ui/projects/@iac-shared/iac-filters/interfaces/savedFilter";
import { IacFilterRef } from "projects/atlp-iac-ui/projects/@iac-shared/iac-filters/token/Iac-filter-ref.interface";

@Component({
  selector: "iac-dec-com-<%=name%>-filter-content",
  templateUrl: "./iac-dec-com-<%=name%>-filter-content.component.html",
  styleUrls: ["./iac-dec-com-<%=name%>-filter-content.component.scss"],
  providers: [
    {
      provide: IAC_FILTER_TOKEN,
      useExisting: IacDecCom<%=classify(name)%>FilterComponent,
    },
  ],
})
export class IacDecCom<%=classify(name)%>FilterComponent
  implements OnInit, OnDestroy, IacFilterRef
{
  filterForm: FormGroup;
  statusList: any;
  subscriptions: Subscription[] = [];
  fullStatusList: any;
  statusTypeList: any;

  constructor(
    private formBuilder: FormBuilder,
    private atplSidebarService: AtlpSidebarService,
    public iacDecCom<%=classify(name)%>TableDataService: IacDecCom<%=classify(name)%>TableDataService,
    public translateService: TranslateService,
    public iacDecCom<%=classify(name)%>Service: IacDecComCommonService
  ) {}

  onResetFilter() {
    this.filterForm.reset();
  }

  onSearch() {
    const payload: any = {
      SKIP: 0,
      TAKE: 10,
      //add other search payload here
    };
    this.iacDecCom<%=classify(name)%>TableDataService.searchTableData(payload);
  }

  getDisplayValue?: (item: any, itemWithDetails?: any) => any;

  ngOnInit(): void {
    this.createForm();
  }

  get formValidator() {
    return this.filterForm.controls;
  }

  private createForm() {
    let formFields;
    this.filterForm = this.formBuilder.group({ ...formFields });
  }

  getFormGroup(): FormGroup {
    return this.filterForm;
  }

  onSelectFilter(filterData) {
    this.filterForm.patchValue({});
  }

  getFilterDataFn() {
    const filterData: IacFilterModel[] = [];
    Object.keys(this.filterForm.controls).forEach((key) => {
      if (
        this.filterForm.get(key).value !== "" &&
        this.filterForm.get(key).value !== null
      ) {
        filterData.push({
          filterBy: key,
          dispalyName: key,
          filterType: "equal",
          value: this.filterForm.get(key).value?.toUpperCase(),
          originalVal: this.filterForm.get(key).value,
        });
      }
    });
    return filterData;
  }

  getValidationErrorMsg(colInfo) {
    let validationMsg = "";

    return validationMsg;
  }

  toggleSidebarOpen(event) {
    this.atplSidebarService.getSidebar(SidebarName.filtersSidebar).close();
  }

  clearfilters() {
    this.filterForm.reset();
  }

  search() {
    this.iacDecCom<%=classify(name)%>TableDataService.searchTableData({});
  }

  ngOnDestroy(): void {
    this.subscriptions.forEach((sub) => {
      sub.unsubscribe();
    });
  }
}
