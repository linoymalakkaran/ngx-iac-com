import {
  AfterViewInit,
  ChangeDetectorRef,
  Component,
  ElementRef,
  OnDestroy,
  OnInit,
  QueryList,
  ViewChild,
  ViewChildren,
} from "@angular/core";
import { FormBuilder, FormGroup } from "@angular/forms";
import {
  MatAccordion,
  MatExpansionPanelDescription,
} from "@angular/material/expansion";
import { AtlpProgressBarService } from "projects/@atlp/components/progress-bar/service/progress-bar.service";
import { AtlpSidebarService } from "projects/@atlp/components/sidebar/sidebar.service";
import { AtlpPerfectScrollbarDirective } from "projects/@atlp/directives/atlp-perfect-scrollbar/atlp-perfect-scrollbar.directive";
import { IconsService } from "projects/@atlp/services/icons.service";
import { IacSidebarName } from "projects/atlp-iac-ui/projects/@iac-shared/models/enums/sidebar-name.enum";
import { Subject, Subscription } from "rxjs";
import { NgxUiLoaderService } from "ngx-ui-loader";
import { SnakBarService } from "projects/@atlp/components/snak-bars/service/snak-bar-default.component";
import { locale as navigationEnglish } from "../../i18n/en";
import { locale as navigationArabic } from "../../i18n/ae";
import { TranslateService } from "@ngx-translate/core";
import { AtlpSlideBarDialogService } from "projects/@atlp/components/atlp-slidebar-dialog/services/atlp-slidebar-dialog.service";
import { distinctUntilChanged, takeUntil } from "rxjs/operators";
import { IacDecAppDataService } from "projects/atlp-iac-ui/projects/iac-dec-ui/src/shared/services/dec-app-data.service";
import { IacDecpaymentResponseNotifyModel } from "projects/atlp-iac-ui/projects/iac-dec-ui/src/shared/iac-dec-payment-common/models/iac-dec-payment-notify.model";
import {
  IacAutoCompletePortsService,
  IacAutoCompleteImporterService,
} from "projects/atlp-iac-ui/projects/iac-dec-ui/src/shared/services/iac-dec-auto-complete.service";
import { IacDecComSliderUtilService } from "../../../shared/services/iac-dec-com-slider-util.service";
import { IacDecComSharedDataService } from "../../../shared/services/iac-dec-com-shared-data.service";
import { IacDecComProgressBarService } from "../../../shared/services/iac-dec-com-progress-bar.service";
import { IacDecComCommonService } from "../../../shared/services/iac-dec-com-common.service";
import { IacDecComPaymentData } from "../../../shared/iac-dec-com-payment-common/models/iac-dec-com-payment.model";
import {
  IacDecComDocInputModel,
  IacDecComServiceType,
} from "../../../shared/iac-dec-com-fileupload-common/iac-dec-com-shared-upload/models/iac-dec-com-doc-list.model";
import { IacDecComErrorHandlerService } from "../../../shared/services/iac-dec-com-error-handler.service";
import { IacApiBaseResponse } from "projects/atlp-iac-ui/projects/@iac-shared/models/base.response";
import { IacDecCom<%=classify(name)%>Service } from "../../services/iac-dec-com-<%=name%>.service";
import { IacUserAccountInfoService } from "projects/atlp-iac-ui/projects/@iac-shared/services/user-account.service";
import { IacUserAccountInfo } from "projects/atlp-iac-ui/projects/@iac-shared/models/IUserAccountInfo";
import { IacDecComServiceCodeEnum } from "../../../shared/enums/iac-dec-com-service-code.enum";

@Component({
  selector: "iac-dec-com-<%=name%>-sidebar",
  templateUrl: "./iac-dec-com-<%=name%>-sidebar.component.html",
  styleUrls: ["./iac-dec-com-<%=name%>-sidebar.component.scss"],
})
export class IacDecComCom<%=classify(name)%>SideBarComponent
  implements OnInit, AfterViewInit, OnDestroy
{
  private _unsubscribeAll$ = new Subject<any>();
  @ViewChild(AtlpPerfectScrollbarDirective)
  directiveRef?: AtlpPerfectScrollbarDirective;
  @ViewChild("sideBarAccordion") accordion: MatAccordion;
  // tammErrorListMapping = IAC_DEC_COM_<%=underscore(name).toUpperCase() %>_ERROR_LIST_MAPPING;
  // tammFormErrorMap: any = IAC_DEC_COM_<%=underscore(name).toUpperCase() %>_ERROR_FORM_MAPPING;
  tammErrorFormControlMap: any = [];
  IacSidebarName = IacSidebarName;
  form: FormGroup;
  errors = [];
  isSubmited: boolean = false;
  currentErrorControl: number = 0;
  isSuperUser: boolean;
  draftID: string;
  draftObj: any = {};
  validationErrors: any;
  selectedLanguage = "en";
  percentageValue: number;

  /** Get handle on matExpansionPanel tags in the template */
  @ViewChildren("matExpansionPanelDescriptionRef")
  matExpansionPanelDescriptionRefs: QueryList<MatExpansionPanelDescription>;

  subscriptions: Subscription[] = [];
  tammListErrors = [];
  paymentData: IacDecComPaymentData;
  isPayAndPrintEnabled: boolean;
  applicationRefNo: string;
  isViewMode: boolean;
  jobPaymentStatus: string;
  iacDecComDocInputModel: IacDecComDocInputModel;
  currentInvalidListNum: number = 0;
  applicationStatus: string = "PENDING";
  topLevelProgress: number = 0;
  accordion_1_progress: number;
  accordion_2_progress: number;

  // @ViewChild(IacDecComAccordionOneComponent, { static: true })
  // iacDecComAccordionOneComponentChild: IacDecComAccordionOneComponent;

  // @ViewChild(IacDecComAccordionTwoComponent, { static: true })
  // iacDecComAccordionTwoComponentChild: IacDecComAccordionTwoComponent;

  userInfo: IacUserAccountInfo;
  svmOid: string;
  serviceCode: IacDecComServiceCodeEnum =
    IacDecComServiceCodeEnum.COM_<%=underscore(name).toUpperCase() %>_SVM_SERVICECODE;
  centerCodeList = [];
  applicationCharge: number = 0;
  checkboxAcceptTerms: boolean;
  checkBoxValue: boolean;

  constructor(
    private iconsService: IconsService,
    public atplSidebarService: AtlpSidebarService,
    private ngxServiceLoader: NgxUiLoaderService,
    private defaultSnakBar: SnakBarService,
    public translateService: TranslateService,
    public portsService: IacAutoCompletePortsService,
    public ImporterService: IacAutoCompleteImporterService,
    private iacDecAppDataService: IacDecAppDataService,
    public iacSlideBarDialogService: AtlpSlideBarDialogService,
    private changeDetectorRef: ChangeDetectorRef,
    private _iacDecComSliderUtilService: IacDecComSliderUtilService,
    private _iacDecComSharedDataService: IacDecComSharedDataService,
    private _iacDecComProgressBarService: IacDecComProgressBarService,
    private _iacDecComCommonService: IacDecComCommonService,
    private _iacDecComErrorHandlerService: IacDecComErrorHandlerService,
    private _atlpProgressBarService: AtlpProgressBarService,
    private elementRef: ElementRef,
    private _iacDecCom<%=classify(name)%>Service: IacDecCom<%=classify(name)%>Service,
    private iacUserAccountInfoService: IacUserAccountInfoService,
    private formBuilder: FormBuilder
  ) {
    this._iacDecComSliderUtilService.setSideBarInitialValues(
      this,
      this.iconsService,
      this.icons
    );
  }

  ngOnInit(): void {
    this.isSuperUser = this.iacDecAppDataService.isSuperUser;
    this._iacDecComSharedDataService.selectedLanguage$.subscribe((lang) => {
      this.selectedLanguage = lang;
      this._iacDecComSharedDataService.loadLangTranslations(
        navigationEnglish,
        navigationArabic
      );
    });
    this.getDraftId();
    this.getUserAccountInfo();
    this.getCenters();
    this.initiateChildForms();
    this.changesForm();
  }

  ngAfterViewInit() {
    if (!this.matExpansionPanelDescriptionRefs) {
      return;
    }
    setTimeout(() => {
      this._iacDecComSliderUtilService.reCalculateAccordionNumbering(this);
      this.progressBarCalulation();
    }, 2000);
  }

  private initiateChildForms(): void {
    let formFields = {
      accordion_1: null,
      accordion_2: null,
    };
    this.form = this.formBuilder.group({ ...formFields });
  }

  get formAccordionOne() {
    return this.form.get("accordion_1");
  }

  get formAccordionTwo() {
    return this.form.get("accordion_2");
  }

  toggleSidebarOpen(key): void {
    this.atplSidebarService.getSidebar(key).toggleOpen();
  }

  resetForm() {
    this.form.reset();
    this.form.markAsPristine();
    this.form.markAsUntouched();
    this.accordion.closeAll();
  }

  progressBarCalulation() {
    this._iacDecComProgressBarService.setProgressForaccordion(
      this,
      "accordion_1_progress",
      "formAccordionOne"
    );
    this._iacDecComProgressBarService.setProgressForaccordion(
      this,
      "accordion_2_progress",
      "formAccordionTwo"
    );
    this._iacDecComProgressBarService.setTopLevelProgress(this, [
      "accordion_1_progress",
      "accordion_2_progress",
    ]);
  }

  private changesForm(): void {
    this.subscriptions.push(
      this.form.valueChanges
        .pipe(
          distinctUntilChanged(
            (prev, curr) => JSON.stringify(prev) === JSON.stringify(curr)
          )
        )
        .pipe(takeUntil(this._unsubscribeAll$))
        .subscribe((newVal) => {
          this._iacDecComErrorHandlerService.calculateErrors(this, this.form);
          this.progressBarCalulation();
        })
    );
  }

  scrollToFirstInvalidControl(action) {
    this._iacDecComErrorHandlerService.scrollToFirstInvalidControl(
      this,
      action
    );
  }

  scrollToInvalidList(action) {
    this._iacDecComErrorHandlerService.scrollToInvalidList(this, action);
  }

  getDraftId() {
    this.subscriptions.push(
      this._iacDecCom<%=classify(name)%>Service.selectedDraft.subscribe(
        (draftId) => {
          if (draftId) {
            this.draftID = draftId;
            if (this.draftID) {
              this.getDraft();
            } else {
              this.draftObj.isDraft = true;
            }
          } else {
            this.draftObj.isDraft = true;
          }
        },
        (error) => {
          this.ngxServiceLoader.stop();
          console.error(error);
        }
      )
    );
  }

  getUserAccountInfo() {
    this.subscriptions.push(
      this.iacUserAccountInfoService.userAccountInfoOnChange$.subscribe(
        (iacUserAccountInfo: IacUserAccountInfo) => {
          if (iacUserAccountInfo) {
            this.userInfo = iacUserAccountInfo;
          }
        }
      )
    );
  }

  getCenters() {
    this.ngxServiceLoader.start();
    const payload = {
      GetEligibleCustomsCenter: {
        CustomRegCode: this.userInfo.PCode,
        ServiceCode: IacDecComServiceCodeEnum.COM_<%=underscore(name).toUpperCase() %>,
        DeclarationTypeCode: "",
        CenterType: "",
      },
    };
    this.subscriptions.push(
      this._iacDecComCommonService.getCenters(payload).subscribe(
        (data: any) => {
          this.ngxServiceLoader.stop();
          this.centerCodeList = data.Data;
        },
        (err) => {
          console.log("Get center codes for Gate Pass => ", err);
          this.ngxServiceLoader.stop();
        }
      )
    );
  }

  getDraft(): void {
    this.ngxServiceLoader.start();
    this.subscriptions.push(
      this._iacDecComCommonService
        .getDraft(this.serviceCode, this.draftID)
        .pipe(takeUntil(this._unsubscribeAll$))
        .subscribe(
          (response: any) => {
            if (response) {
              const responseTransform =
                this._iacDecComCommonService.keysToLowerCase(response);
              if (
                responseTransform &&
                responseTransform.data &&
                responseTransform.data.data &&
                responseTransform.data.data.length > 0
              ) {
                this.ngxServiceLoader.stop();
                this.draftObj =
                  responseTransform.data.data[
                    responseTransform.data.data.length - 1
                  ];
                this.draftID =
                  this.draftObj && this.draftObj.metadata
                    ? JSON.parse(this.draftObj?.metadata).ATLPIC_ADCA_DRAFT
                        ?.draft_id
                    : "";
                this.draftObj.data.draft_Id = this.draftID;
                this.draftObj.metadata = JSON.parse(this.draftObj?.metadata);
                this.applicationStatus = this.draftObj.statusCode;
                this.svmOid = this.draftObj.id;
                this.draftObj.isDraft = true;
                const formData =
                  responseTransform.data.data[
                    responseTransform.data.data.length - 1
                  ]?.data.SubmitRequestForGatePassCBMReq.CBMBody;
                this.updateFormData(formData);
                if (
                  this.draftObj.metadata &&
                  this.draftObj.metadata.ATLPIC_ADCA_SUBMIT
                ) {
                  this.applicationRefNo =
                    this.draftObj.metadata.ATLPIC_ADCA_SUBMIT.reference_no;
                  this.applicationStatus =
                    this.draftObj.metadata.ATLPIC_ADCA_SUBMIT.status_code;
                }
                if (
                  this.applicationRefNo &&
                  this.applicationStatus != "COMPLETED"
                ) {
                  this.getApplicationStatus();
                }
              }
            }
          },
          (error) => {
            this.defaultSnakBar.error(error);
            this.ngxServiceLoader.stop();
          }
        )
    );
  }

  updateFormData(formData: any) {
    throw new Error("Method not implemented.");
  }

  saveDraft(): void {
    this._iacDecComErrorHandlerService.clearTAMMError(this);
    if (this.form.invalid) {
      this.isSubmited = true;
      // this.accordion.openAll();
      // this.scrollToFirstInvalidControl(null);
      // this._iacDecComErrorHandlerService.calculateErrors(this, this.form);
      return;
    } else {
      this.ngxServiceLoader.start();
      const payload = this.createPayload();
      // payload.isDraft = true;
      // payload.data.draft_Id = this.draftID;

      const isAdd: boolean = this.draftID ? false : true;

      this.subscriptions.push(
        this._iacDecComCommonService
          .saveDraft(isAdd, payload, this.serviceCode, this.svmOid)
          .pipe(takeUntil(this._unsubscribeAll$))
          .subscribe(
            (response: any) => {
              const responseTransform =
                this._iacDecComCommonService.keysToLowerCase(response);
              if (responseTransform && responseTransform.success) {
                this.draftObj = responseTransform.data;
                this.draftID =
                  this.draftObj && this.draftObj.metadata
                    ? JSON.parse(this.draftObj?.metadata).ATLPIC_ADCA_DRAFT
                        ?.draft_id
                    : "";
                this.draftObj.data.draft_Id = this.draftID;

                this.applicationStatus = this.draftObj?.status;
                this._iacDecComErrorHandlerService.updateTAMMErrorMsg([]);
                let msg;
                if (isAdd) {
                  msg =
                    this.translateService.instant("CreateDraftSuccessMsg") +
                    " " +
                    this.draftID;
                } else {
                  msg =
                    this.translateService.instant("DraftUpdateMsg") +
                    " " +
                    this.draftID;
                }
                let okButtonText = this.translateService.instant("close");
                this.getDraft();
                setTimeout(() => {
                  this._iacDecComSliderUtilService.displayDialog(
                    "success",
                    msg,
                    okButtonText,
                    false
                  );
                }, 300);
              }
            },
            (error) => {
              this.defaultSnakBar.error(error);
              this.ngxServiceLoader.stop();
            }
          )
      );
    }
  }

  createPayload() {
    throw new Error("Method not implemented.");
  }

  setPaymentData() {
    this.paymentData = {
      applicationReferenceNo: this.applicationRefNo,
      serviceCode: IacDecComServiceCodeEnum.COM_<%=underscore(name).toUpperCase() %>,
      svmServiceCode:
        IacDecComServiceCodeEnum.COM_<%=underscore(name).toUpperCase() %>_SVM_SERVICECODE,
      jobStatus: "PAYMENT_PENDING",
      draftId: this.draftID,
    };
    this.isPayAndPrintEnabled = true;
  }

  checkDocumentsSubmitted() {
    this.ngxServiceLoader.start();
    this.checkSubmitDraftEligibility();
  }

  getApplicationStatus() {
    this.ngxServiceLoader.start();
    this.subscriptions.push(
      this._iacDecComCommonService
        .getApplicationStatus(this.applicationRefNo)
        .pipe(takeUntil(this._unsubscribeAll$))
        .subscribe(
          (jobStatusResppnse: IacApiBaseResponse<any>) => {
            const AuthorityStatus = jobStatusResppnse.Data;
            this.applicationStatus = AuthorityStatus?.ApplicationStatusCode;
            if (
              AuthorityStatus &&
              AuthorityStatus.ApplicationStatusCode == "PAYMENT_PENDING"
            ) {
              this.jobPaymentStatus = "payment_pending";
              let isPayAndPrintEnabled = true;
              if (isPayAndPrintEnabled) {
                this.setPaymentData();
              } else {
                this.paymentData = null;
              }
            }
            this.ngxServiceLoader.stop();
          },
          (error) => {
            console.log(error);
            this.ngxServiceLoader.stop();
          }
        )
    );
  }

  submitDraft() {
    this.currentInvalidListNum = 0;
    this.isSubmited = false;
    // this.accordion.openAll();
    this.ngxServiceLoader.start();
    let payload = this.prepareSubmitPayload();

    this.subscriptions.push(
      this._iacDecComCommonService
        .submitDraft(payload, this.serviceCode, this.svmOid)
        .pipe(takeUntil(this._unsubscribeAll$))
        .subscribe(
          (response: IacApiBaseResponse<any>) => {
            this.ngxServiceLoader.stop();
            this.isSubmited = true;
            const responseTransform =
              this._iacDecComCommonService.keysToLowerCase(response);
            if (responseTransform.success) {
              const data = responseTransform.data;
              if (data && data.metadata) {
                this.applicationRefNo = JSON.parse(
                  responseTransform.data.metadata
                ).ATLPIC_ADCA_SUBMIT?.reference_no;
                this.applicationStatus = JSON.parse(
                  responseTransform.data.metadata
                ).ATLPIC_ADCA_SUBMIT?.status_code;
                this.applicationCharge = JSON.parse(
                  responseTransform.data.metadata
                ).ATLPIC_ADCA_SUBMIT?.amount;

                const msg =
                  this.translateService.instant("Submission_Success") +
                  `${this.applicationRefNo}\n` +
                  this.translateService.instant("Application_Charge") +
                  `${this.applicationCharge}\n` +
                  this.translateService.instant("Application_Status") +
                  ` ${this.applicationStatus}`;
                let okButtonText = this.translateService.instant("close");
                this._iacDecComSliderUtilService.displayDialog(
                  "success",
                  msg,
                  okButtonText,
                  true

                );

                this.getApplicationStatus();
              } else {
                this.defaultSnakBar.error(
                  this.translateService.instant("Submission_Failure")
                );
              }
            } else {
              this.validationErrors = [];
              // this.applicationRefNo = response.Data?.referenceNumber;
              this.validationErrors = responseTransform.errorlst;
              //this._iacDecComErrorHandlerService.mapErrorsToControls(this);
              //this.mapErrorsToControls(); //map errors local method instead of common called
              this._iacDecComErrorHandlerService.mapListErrorMsgs(this);
              setTimeout(() => {
                this._iacDecComErrorHandlerService.calculateErrors(
                  this,
                  this.form
                );
                this.changeDetectorRef.markForCheck();
              }, 1000);
              this.accordion?.openAll();
            }
          },
          (error) => {
            this.defaultSnakBar.error(error);
            this.ngxServiceLoader.stop();
          }
        )
    );
  }

  prepareSubmitPayload() {
    const payload: any = {}; //|| this.createPayload();
    payload.id = this.draftObj.id;
    payload.data = this.draftObj.data;
    payload.metadata = this.draftObj.metadata;
    payload.documents = this.draftObj.documents;
    payload.openForEdit = false;
    payload.isDraft = false;
    return payload;
  }

  getJobStatus() {
    this.ngxServiceLoader.start();
    this.subscriptions.push(
      this._iacDecComCommonService
        .getJobStatus(this.applicationRefNo)
        .pipe(takeUntil(this._unsubscribeAll$))
        .subscribe(
          (jobStatusResppnse: IacApiBaseResponse<any>) => {
            this.setPaymentData();
            this.toggleSidebarOpen(IacSidebarName.iacDecpaymentCheckout);
            this.ngxServiceLoader.stop();
          },
          (error) => {
            console.log(error);
            this.ngxServiceLoader.stop();
          }
        )
    );
  }

  openAttachment(): void {
    this.isViewMode = this.applicationRefNo ? true : false;
    this.iacDecComDocInputModel = {
      serviceCode: IacDecComServiceType.COM_GATE_PASS,
      scenarioCode: "",
      profileCode: this.userInfo.PCode,
      serviceSubType: "",
      svmServiceCode:
        IacDecComServiceCodeEnum.COM_<%=underscore(name).toUpperCase() %>_SVM_SERVICECODE,
      draftId: this.draftID,
      applicationRefNo: this.svmOid,
      isViewMode: this.isViewMode,
      alreadyUploadedDocuments: [],
    };
    this.toggleSidebarOpen(IacSidebarName.addAttachment);
  }

  checkSubmitDraftEligibility() {
    if (!this.checkboxAcceptTerms) {
      this.defaultSnakBar.error(
        this.translateService.instant("PleaseAcceptTC")
      );
      this.ngxServiceLoader.stop();
      return;
    }
    this.submitDraft();
  }

  notifyAfterSuccessfulPayment(
    paymentResponse: IacDecpaymentResponseNotifyModel
  ) {
    console.log(
      "notifyAfterSuccessful inside clerence: => \n",
      JSON.stringify(paymentResponse)
    );
    this.toggleSidebarOpen(IacSidebarName.iacDecpaymentCheckout);
    this.isPayAndPrintEnabled = false;
    this.getApplicationStatus();
  }

  selectedStatus($event) {
    this.checkboxAcceptTerms = true;
  }

  checkboxChanged(accepted: boolean) {
    this.checkBoxValue = accepted;
  }

  private get icons(): Array<string> {
    return [
      "save-icon",
      "succes-form",
      "close-success",
      "attach-icon",
      "payment",
      "view-charges-icon",
      "download-icon",
    ];
  }

  ngOnDestroy() {
    this.subscriptions.forEach((sub) => sub.unsubscribe());
    this._unsubscribeAll$.next();
    this._unsubscribeAll$.complete();
  }
}
