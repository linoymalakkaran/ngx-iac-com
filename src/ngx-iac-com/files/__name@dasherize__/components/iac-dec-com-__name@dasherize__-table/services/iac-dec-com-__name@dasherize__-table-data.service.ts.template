import { HttpClient } from "@angular/common/http";
import { Injectable } from "@angular/core";
import { NgxUiLoaderService } from "ngx-ui-loader";
import { IacCheckHelper } from "projects/atlp-iac-ui/projects/@iac-shared/helper/check";
import { BehaviorSubject } from "rxjs";
import { IacDecCom<%=classify(name)%>ApiConfig } from "../../../configs/iac-dec-com-<%=name%>-api.config";
import { AtlpRichClassicTableEmitElInfoTable } from "projects/atlp-table/src/lib/models/atlp-rich-classic-table-interfaces";
import { IacDecCom<%=classify(name)%>CardStatus } from "../../../enums/iac-dec-com-<%=name%>-card-status.enum";
import { IacDecComCommonService } from "../../../../shared/services/iac-dec-com-common.service";
import { IacDecCom<%=classify(name)%>ListViewModel } from "../../../interfaces/iac-dec-com-<%=name%>-list-view.interface";

@Injectable({
  providedIn: "root",
})
export class IacDecCom<%=classify(name)%>TableDataService {
  COM_<%=underscore(name).toUpperCase() %>_TABLE_DATA: IacDecCom<%=classify(name)%>ListViewModel[] = [];
  COM_<%=underscore(name).toUpperCase() %>_TABLE_DATA$: BehaviorSubject<any> = new BehaviorSubject<
    IacDecCom<%=classify(name)%>ListViewModel[]
  >([]);
  public userSelectedInfo$: BehaviorSubject<AtlpRichClassicTableEmitElInfoTable> =
    new BehaviorSubject<AtlpRichClassicTableEmitElInfoTable>(null);

  constructor(
    public httpClient: HttpClient,
    public Com<%=classify(name)%>ApiConfig: IacDecCom<%=classify(name)%>ApiConfig,
    private ngxLoaderService: NgxUiLoaderService,
    private iacDecComCommonService: IacDecComCommonService
  ) {}

  async searchTableData(payload) {
    this.ngxLoaderService.start();
    try {
      let response = await new Promise((resolve, reject) => {
        this.iacDecComCommonService.searchTableData(payload, resolve, reject);
      });
      if (IacCheckHelper.isNull(response)) {
        this.COM_<%=underscore(name).toUpperCase() %>_TABLE_DATA = [];
        return [...this.COM_<%=underscore(name).toUpperCase() %>_TABLE_DATA];
      }
      this.COM_<%=underscore(name).toUpperCase() %>_TABLE_DATA = [
        ...this.mapEntitiesToModels(response),
      ];
      this.COM_<%=underscore(name).toUpperCase() %>_TABLE_DATA$.next([
        ...this.COM_<%=underscore(name).toUpperCase() %>_TABLE_DATA,
      ]);
      return [...this.COM_<%=underscore(name).toUpperCase() %>_TABLE_DATA];
    } catch (error) {
      console.log("searchTableData for COM_<%=underscore(name).toUpperCase() %> failed: => ", error);
      this.ngxLoaderService.stop();
      this.COM_<%=underscore(name).toUpperCase() %>_TABLE_DATA$.next([]);
      return [];
    }
  }

  mapEntitiesToModels(data: any): IacDecCom<%=classify(name)%>ListViewModel[] {
    let _results = [];
    data.forEach((record) => {
      const requiredOBj = {
        id: 1,
        info: {
          VesselCode: record.VesselCode,
          dONumber: record.DONumber,
          port: record.PortEngName,
          arrivaltime: record.ArrivalDate,
          arrivalDate: record.ArrivalDate,
          billType: record.BillEngType,
        },
        VesselCode: {
          status: IacDecCom<%=classify(name)%>CardStatus.shipper,
          statusText: record.VesselCode,
        },
        voyageNo: {
          status: IacDecCom<%=classify(name)%>CardStatus.voyageNo,
          statusText: record.VoyageNumber,
        },
        port: {
          status: IacDecCom<%=classify(name)%>CardStatus.shipper,
          statusText: record.PortEngName,
        },
        arrivalDate: {
          status: IacDecCom<%=classify(name)%>CardStatus.shipper,
          statusText: record.ArrivalDate,
        },
        billType: {
          status: IacDecCom<%=classify(name)%>CardStatus.shipper,
          statusText: record.BillType,
        },
        masterBL: {
          status: IacDecCom<%=classify(name)%>CardStatus.masterBL,
          statusText: record.MasterBlNumber,
        },
        houseBL: {
          status: IacDecCom<%=classify(name)%>CardStatus.houseBL,
          statusText: record.HouseBlNumber,
        },
        consignee: {
          status: IacDecCom<%=classify(name)%>CardStatus.consignee,
          statusText: record.Consignee,
        },
        shipper: {
          status: IacDecCom<%=classify(name)%>CardStatus.shipper,
          statusText: record.Shipper,
        },
        agentCode: {
          status: IacDecCom<%=classify(name)%>CardStatus.agentCode,
          statusText: record.AgentCode,
        },
      };

      _results.push(requiredOBj);
    });
    return _results;
  }
}
