import { Component, Inject, Input, OnDestroy, OnInit } from "@angular/core";
import { UntilDestroy } from "@ngneat/until-destroy";
import { IconsService } from "projects/@atlp/services/icons.service";
import { ATLP_PORTAL_TABLE_DATA } from "projects/atlp-table/src/lib/injectors/atlp-table-portal.injector";
import { AtlpRichClassicTableEmitElInfoTable } from "projects/atlp-table/src/lib/models/atlp-rich-classic-table-interfaces";
import { Subject } from "rxjs";
import { takeUntil } from "rxjs/operators";
import { IacDecCom<%=classify(name)%>TableDataService } from "../../../iac-dec-com-<%=name%>-table/services/iac-dec-com-<%=name%>-table-data.service";
import { IacDecComTableListModel } from "../../../../../shared/models/iac-dec-com-table-list-models/iac-dec-com-table-list.models";

@UntilDestroy()
@Component({
  selector: "iac-dec-com-<%=name%>-info",
  templateUrl: "./iac-dec-com-<%=name%>-info.component.html",
  styleUrls: ["./iac-dec-com-<%=name%>-info.component.scss"],
})
export class IacDecCom<%=classify(name)%>InfoComponent implements OnInit, OnDestroy {
  private _unsubscribeAll$ = new Subject<any>();
  // @Input() infoData: IacDecComTableListModel;
  userSelectedData: AtlpRichClassicTableEmitElInfoTable<any>;
  isSelected: boolean = false;
  infoData: any = null;

  constructor(
    private _iconsService: IconsService,
    @Inject(ATLP_PORTAL_TABLE_DATA) public data,
    private iacDecCom<%=classify(name)%>TableDataService: IacDecCom<%=classify(name)%>TableDataService
  ) {
    if (data) {
      this.infoData = data.infoObjFromParent.info.data;
    }
    this._iconsService.registerIcons(this.icons);
  }

  ngOnInit(): void {
    this.iacDecCom<%=classify(name)%>TableDataService.userSelectedInfo$
      .pipe(takeUntil(this._unsubscribeAll$))
      .subscribe((userSelectedData: AtlpRichClassicTableEmitElInfoTable) => {
        if (userSelectedData) {
          this.userSelectedData = userSelectedData;
          if (this.infoData.DRAFT_ID === userSelectedData.data.DRAFT_ID) {
            this.isSelected = userSelectedData.isSelected;
          } else {
            this.isSelected = false;
          }
        }
      });
  }

  private get icons(): Array<string> {
    return ["message-icon"];
  }

  ngOnDestroy() {
    this._unsubscribeAll$.next();
    this._unsubscribeAll$.complete();
  }
}
